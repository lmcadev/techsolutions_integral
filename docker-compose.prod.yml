version: '3.8'

services:
  # Backend API - Puerto 3010 para VPS
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: techsolutions_backend
    ports:
      - "3010:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PGHOST=db
      - PGPORT=5432
      - PGUSER=${DB_USER:-techsolutions}
      - PGPASSWORD=${DB_PASSWORD:-techsolutions_pass_production_2025}
      - PGDATABASE=${DB_NAME:-techsolutions_db}
      - DATABASE_URL=postgres://${DB_USER:-techsolutions}:${DB_PASSWORD:-techsolutions_pass_production_2025}@db:5432/${DB_NAME:-techsolutions_db}
      - JWT_SECRET=${JWT_SECRET:-techsolutions_jwt_secret_production_vps_2025_secure}
      - JWT_EXPIRES_IN=7d
      - FRONTEND_URL=http://${VPS_HOST:-localhost}:8080
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - BCRYPT_SALT_ROUNDS=12
    networks:
      - techsolutions_network
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health", "--timeout=5"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Angular con Nginx
  frontend:
    build:
      context: ./techsolutions_integral
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: techsolutions_frontend
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - techsolutions_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80", "--timeout=5"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: techsolutions_db
    environment:
      - POSTGRES_USER=${DB_USER:-techsolutions}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-techsolutions_pass_production_2025}
      - POSTGRES_DB=${DB_NAME:-techsolutions_db}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - techsolutions_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-techsolutions} -d ${DB_NAME:-techsolutions_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

networks:
  techsolutions_network:
    driver: bridge

volumes:
  db_data:
    driver: local